// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/firstService.proto

package firstService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FirstService service

func NewFirstServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FirstService service

type FirstService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (FirstService_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (FirstService_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (FirstService_BidiStreamService, error)
}

type firstService struct {
	c    client.Client
	name string
}

func NewFirstService(name string, c client.Client) FirstService {
	return &firstService{
		c:    c,
		name: name,
	}
}

func (c *firstService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "FirstService.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firstService) ClientStream(ctx context.Context, opts ...client.CallOption) (FirstService_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "FirstService.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &firstServiceClientStream{stream}, nil
}

type FirstService_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*ClientStreamRequest) error
}

type firstServiceClientStream struct {
	stream client.Stream
}

func (x *firstServiceClientStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *firstServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *firstService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (FirstService_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "FirstService.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &firstServiceServerStream{stream}, nil
}

type FirstService_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type firstServiceServerStream struct {
	stream client.Stream
}

func (x *firstServiceServerStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *firstServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firstService) BidiStream(ctx context.Context, opts ...client.CallOption) (FirstService_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "FirstService.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &firstServiceBidiStream{stream}, nil
}

type FirstService_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type firstServiceBidiStream struct {
	stream client.Stream
}

func (x *firstServiceBidiStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *firstServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *firstServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FirstService service

type FirstServiceHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, FirstService_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, FirstService_ServerStreamStream) error
	BidiStream(context.Context, FirstService_BidiStreamStream) error
}

func RegisterFirstServiceHandler(s server.Server, hdlr FirstServiceHandler, opts ...server.HandlerOption) error {
	type firstService interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type FirstService struct {
		firstService
	}
	h := &firstServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FirstService{h}, opts...))
}

type firstServiceHandler struct {
	FirstServiceHandler
}

func (h *firstServiceHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.FirstServiceHandler.Call(ctx, in, out)
}

func (h *firstServiceHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.FirstServiceHandler.ClientStream(ctx, &firstServiceClientStreamStream{stream})
}

type FirstService_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type firstServiceClientStreamStream struct {
	stream server.Stream
}

func (x *firstServiceClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *firstServiceHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FirstServiceHandler.ServerStream(ctx, m, &firstServiceServerStreamStream{stream})
}

type FirstService_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type firstServiceServerStreamStream struct {
	stream server.Stream
}

func (x *firstServiceServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *firstServiceHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.FirstServiceHandler.BidiStream(ctx, &firstServiceBidiStreamStream{stream})
}

type FirstService_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type firstServiceBidiStreamStream struct {
	stream server.Stream
}

func (x *firstServiceBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *firstServiceBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *firstServiceBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *firstServiceBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *firstServiceBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *firstServiceBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
